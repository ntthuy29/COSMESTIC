@model List<COSMESTIC.Models.Data.Products>
@{
}
@section Styles {
<link rel="stylesheet" href="~/css/product.css" />
}
@{
    var role = Context.Session.GetString("role");
}
<div id="ads" class="ads-container">
    <div class="ads-overlay">
        <h2>Khuyến mãi đặc biệt</h2>
        <p>Khám phá các sản phẩm mới nhất của chúng tôi!</p>
    </div>
</div>

<div style=" margin-top: 20px; border: inherit;box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin-bottom: 50px; background-color: #D9D9D9; padding: 10px; border-radius: 10px;" class="d-flex" .">
    <div>
     (@Model.Count() sản phẩm)
    </div>

    <div class="flex-column flex-column" style="margin-left: 50px;">
        <div class="d-flex align-items-center gap-2">
            <label>Khoảng giá: </label>

            <input type="number" class="form-control" id="mins" name="min" placeholder="TỪ ..000đ" style="width: 100px; height: 25px;">
            -
            <input type="number" class="form-control" id="maxs" name="max" placeholder="ĐẾN ...000đ" style="width: 100px; height: 25px;">
            <input type="hidden" name="catalogID" value="@Model[0].catalogID" />
            <button id="btnPrices" class="btn btn-warning" style="margin-inline:100px; margin-top: 10px;">Áp dụng</button>

        </div>
    </div>
</div>

<!--hihihi-->
@if (ViewBag.Message != null)
{
    <div class="alert alert-warning">
        @ViewBag.Message
    </div>
}
<div class="container container-product">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @for(var i=0;i<Model.Count();i++)
        {
            var product = Model[i];


            <div data-price="@product.price" class="  items col product-item @(i >= 8 ? "d-none" : "")" onclick="getDetail(@product.productID,'@product.productName')" id="@product.productID">
                <div class="card h-100 shadow-sm card-radius">
                    <img src="@Url.Content("~/" + product.imagePath)" class="card-img-top img-fluid" style="height: 200px; object-fit: contain;" />
                    <div class="card-body">
                        <h6 class="card-title text-truncate" title="@product.productName">@product.productName</h6>


                        <p class="mb-1 text-danger fw-bold">@product.price.ToString("N0") ₫</p>
                        @if (role == "Customer")
                        {
                            <form method="post" action="@Url.Action("AddToCart", "ShoppingCart")">
                                <input type="hidden" name="productId" value="@product.productID" />
                                <input type="hidden" name="quantity" id="productQuantity" value="1" /> <!-- Số lượng (mặc định là 1) -->


                                <button type="submit" class="btn btn-outline-warning w-100" onclick="showalert()">🛒 Thêm vào giỏ</button>

                            </form>
                        }else
                        {

                            <input type="hidden" name="productId" value="@product.productID" />
                            <button type="button" onclick="event.stopPropagation(); alertLogin()"  class="btn btn-outline-warning w-100">🛒 Thêm vào giỏ</button>
                        }
                    </div>
                </div>
            </div>


        }

        <div class="text-center " style="margin-top: 30px; margin-inline: 500px;">
            <button id="loadMoreBtn" class="btn btn-danger">Xem thêm</button>
        </div>

        @if(role == null)
        {
            <div id="deleteModal" class="modal" style="display: none;">
               
                <div class="modal-content">
                   
                    <span type="button" class="btn-close" disabled aria-label="Close" style=" margin-right: auto;" id="close" onclick="setCursor()"></span>
                    <p class="text-center" style="font-size: 20px;">Vui lòng đăng nhập</p>
                   <div class="d-flex justify-content-sm-between">
                        <form action="/Login/Login" method="get">
                            <button type="submit" class="btn btn-danger" id="confirmDelete">Đăng nhập</button>
                        </form>


                        <form action="/Register/Register"> <button id="cancelDelete" class="btn btn-secondary">Đăng ký tài khoản</button> </form>
                   </div>
                </div>
            </div>
        }
            </div>
    <div class="alert alert-info" id="alet" role="alert" style="display: none;">
        Đã thêm sản phẩm vào giỏ hàng
    </div>
 </div>
 

@section Scripts{
    <script>

        function getDetail(productId, productName) {
            window.location.href = '@Url.Action("ProductDetail", "Product")/' + productId + '/' + encodeURIComponent(productName);
        }

        function showalert(){
            var alert = document.getElementById('alet');
            alert.style.display='block';
        }

        document.addEventListener('DOMContentLoaded', function() {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            const productItems = document.querySelectorAll('.product-item.d-none');
            let itemsToShow = 4; 

            loadMoreBtn.addEventListener('click', function() {
             
                const hiddenItems = Array.from(productItems).filter(item => item.classList.contains('d-none'));

                hiddenItems.slice(0, itemsToShow).forEach(item => {
                    item.classList.remove('d-none');
                });

             
                if (hiddenItems.length <= itemsToShow) {
                    loadMoreBtn.style.display = 'none';
                }
            });

            if (productItems.length === 0) {
                loadMoreBtn.style.display = 'none';
            }
        });
                       document.addEventListener('click', function(e) {
            if (e.target.id === 'btnPrices') {
                const min = document.getElementById('mins').value;
                const max = document.getElementById('maxs').value;

                const minPrice = min ? parseInt(min) * 1000 : 0;
                const maxPrice = max ? parseInt(max) * 1000 : Infinity;

                filterByPrice(minPrice, maxPrice);
            }
        });
        function filterByPrice(minPrice, maxPrice) {
            const items = document.querySelectorAll('.items');
            items.forEach(item => {
                const price = parseInt(item.getAttribute('data-price')); // Lấy giá từ data-price
                const isInRange = (isNaN(minPrice) || price >= minPrice) &&
                                 (isNaN(maxPrice) || price <= maxPrice);

               
                if (!isInRange) {
                    item.classList.add('d-none');
                } else {
                    item.classList.remove('d-none');
                }
            });

           
            updateLoadMoreButton();
        }

        function updateLoadMoreButton() {
            const visibleItems = document.querySelectorAll('.items:not(.d-none)').length;
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            if (visibleItems <= 8) {
                loadMoreBtn.style.display = 'none';
            } else {
                loadMoreBtn.style.display = 'block';
            }
        }
        
    </script>

}
      <script src="~/js/product.js"></script>
      <script src="~/js/alertLogin.js"></script>
    
